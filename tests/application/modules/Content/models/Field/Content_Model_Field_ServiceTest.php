<?php

/**
 * Test class for Content_Model_SectionField_Service.
 * Generated by PHPUnit on 2011-06-22 at 08:14:24.
 */
class Content_Model_Field_ServiceTest extends PHPUnit_Framework_TestCase {

   /**
     * @var Content_Model_Field_Service
     */
    protected $service;
    
    protected $contentService;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        
        $this->installer = new Core_Installer();
        $this->installer->installTest();
        
        $this->contentInstaller = new Content_Installer();
        $this->contentInstaller->installTest();
        
        $this->service = new Content_Model_Field_Service();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
     //  $this->service->deleteAll();
    }

    public function testGetMapper() {

        $this->assertInstanceOf('Content_Model_Field_MapperInterface', $this->service->getMapper());
    }

    /**
     * @todo Implement testSetMapper().
     */
    public function testSetMapper() {
        
        $mapper = new Content_Model_Field_MapperDbTable();
         $this->service->setMapper($mapper);
        
        $this->assertInstanceOf('Content_Model_Field_MapperInterface', $this->service->getMapper());
        $this->assertEquals($mapper, $this->service->getMapper());
        //$this->ass
    }
    
    private function createValidObject() {
        
        $field = new Content_Model_Field();
        $field->section = $this->contentInstaller->section->test->id;
        $field->set = $this->contentInstaller->fieldSet->test->id;
        $field->order = 2;
        $field->element = 'text';
        $field->name = 'test_name';
        $field->label = 'testLabel';
        $field->value = 'testValue';
        $field->description = 'testDescription';
        $field->attributes = array('testA'=>'valueA');
        $field->validators = array('testB'=>'valueB');
        $field->filters = array('testC'=>'valueC');
        $field->locked = false;
        $field->type = Content_Model_Field::TEMPLATE;
        $field->required = false;
        $field->visible = true;

        $result = $this->service->create($field);

        $this->assertInstanceOf('Content_Model_Field_Interface', $result);
        return $result;
    }
    
    public function testCreateInvalidSectionField() {
        $field = new Content_Model_Field();
        $field->section = 1;
        $field->order = 2;
        //$field->name = 'test_name';
        $field->element = 'text';
        $field->label = 'testLabel';
        $field->value = 'testValue';
        $field->attributes = array('testA'=>'valueA');
        $field->validators = array('testB'=>'valueB');
        $field->filters = array('testC'=>'valueC');
        $field->locked = false;
        $field->type = 0;
        $field->required = false;
        $field->visible = true;
        $this->setExpectedException('Exception');
        $result = $this->service->create($field);
    }
    
    public function testCreateValidObjectFromMinimum() {
        $field = new Content_Model_Field();
        $field->section = $this->contentInstaller->section->test->id;
        $field->set = $this->contentInstaller->fieldSet->test->id;
        $field->element = 'text';
        $field->name = 'test_name';
        $field->label = 'testLabel';

        $result = $this->service->create($field);

        $this->assertInstanceOf('Content_Model_Field_Interface', $result);
        return $result;
    }
//    
//    public function testDuplicateUrl() {
//
//        $field1 = $this->createValidSectionField();
//        $this->setExpectedException('DuplicateEntryException');
//        $field2 = $this->createValidSectionField();
//    }

    public function testCreateValidFromObject() {

        $result = $this->createValidObject();       

        $this->assertNotNull($result->id);
        $this->assertEquals($this->contentInstaller->section->test->id, $result->section);
        $this->assertEquals($this->contentInstaller->fieldSet->test->id, $result->set);
        $this->assertEquals(2, $result->order);
        $this->assertEquals('text', $result->element);
        $this->assertEquals('test_name', $result->name);
        $this->assertEquals('testLabel', $result->label);
        $this->assertEquals('testValue', $result->value);
        $this->assertEquals('testDescription', $result->description);
        $this->assertEquals('valueA', $result->attributes['testA']);
        $this->assertEquals('valueB', $result->validators['testB']);
        $this->assertEquals('valueC', $result->filters['testC']);
        $this->assertEquals(false, $result->locked);
        $this->assertEquals(Content_Model_Field::TEMPLATE, $result->type);
        $this->assertEquals(false, $result->required);
        $this->assertEquals(true, $result->visible);
    }
    
    public function testCreateFromArray() {

        $field = array(
            'section' => $this->contentInstaller->section->test->id,
            'set' => $this->contentInstaller->fieldSet->test->id,
            'order' => 2,
            'element' => 'text',
            'name' => 'test_name',
            'label' => 'testLabel',
            'value' => 'testValue',
            'description' => 'testDescription',
            'attributes' => array('testA' => 'valueA'),
            'validators' => array('testB' => 'valueB'),
            'filters' => array('testC' => 'valueC'),
            'locked' => false,
            'type' => Content_Model_Field::TEMPLATE,
            'required' => false,
            'visible' => true);

        $result = $this->service->create($field);

        $this->assertInstanceOf('Content_Model_Field_Interface', $result);

         $this->assertNotNull($result->id);
        $this->assertEquals($this->contentInstaller->section->test->id, $result->section);
        $this->assertEquals($this->contentInstaller->fieldSet->test->id, $result->set);
        $this->assertEquals(2, $result->order);
        $this->assertEquals('text', $result->element);
        $this->assertEquals('test_name', $result->name);
        $this->assertEquals('testLabel', $result->label);
        $this->assertEquals('testValue', $result->value);
        $this->assertEquals('testDescription', $result->description);
        $this->assertEquals('valueA', $result->attributes['testA']);
        $this->assertEquals('valueB', $result->validators['testB']);
        $this->assertEquals('valueC', $result->filters['testC']);
        $this->assertEquals(false, $result->locked);
        $this->assertEquals(Content_Model_Field::TEMPLATE, $result->type);
        $this->assertEquals(false, $result->required);
        $this->assertEquals(true, $result->visible);
    }

    public function testCreateException() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->service->create($badObject);
    }

    public function testGetObjectById() {

        //setup
        $field = $this->createValidObject();

        //test getObject
        $result = $this->service->getObjectById($field->id);
        
        $this->assertInstanceOf('Content_Model_Field_Interface', $result);
        
        $this->assertEquals($field->id, $result->id);
        $this->assertEquals($this->contentInstaller->section->test->id, $result->section);
        $this->assertEquals($this->contentInstaller->fieldSet->test->id, $result->set);
        $this->assertEquals(2, $result->order);
        $this->assertEquals('text', $result->element);
        $this->assertEquals('test_name', $result->name);
        $this->assertEquals('testLabel', $result->label);
        $this->assertEquals('testValue', $result->value);
        $this->assertEquals('testDescription', $result->description);
        $this->assertEquals('valueA', $result->attributes['testA']);
        $this->assertEquals('valueB', $result->validators['testB']);
        $this->assertEquals('valueC', $result->filters['testC']);
        $this->assertEquals(false, $result->locked);
        $this->assertEquals(Content_Model_Field::TEMPLATE, $result->type);
        $this->assertEquals(false, $result->required);
        $this->assertEquals(true, $result->visible);
    }
    
//    public function testGetObjectByUrl() {
//
//        //setup
//        $field = $this->createValidSectionField();
//
//        //test getObject
//        $result = $this->service->getObjectByUrl($field->url);
//        
//        $this->assertInstanceOf('Content_Model_Field_Interface', $result);
//
//        $this->assertEquals($field->id, $result->id);
//        $this->assertEquals(0, $result->set);
//        $this->assertEquals(1, $result->parent);
//        $this->assertEquals(2, $result->order);
//        $this->assertEquals('testUrl', $result->url);
//        $this->assertEquals('testTitle', $result->title);
//        $this->assertEquals('testDescription', $result->description);
//    }
//    
//     public function testGetInvalidObjectByUrl() {
//
//        $this->setExpectedException('NotFoundException');
//        $result = $this->service->getObjectByUrl("testnotindatabase");
//
//    }

    public function testUpdateFromObject() {

        //setup
        $field = $this->createValidObject();

        //update values
      //  $field->section = 2;
        $field->order = 3;
        $field->element = 'textarea';
        $field->name = 'test_name2';
        $field->label = 'testLabel2';
        $field->value = 'testValue2';
        $field->description = 'testDescription2';
        $field->attributes = array('testA'=>'valueA2');
        $field->validators = array('testB'=>'valueB2');
        $field->filters = array('testC'=>'valueC2');
        $field->locked = true;
        $field->type = Content_Model_Field::USER;
        $field->required = true;
        $field->visible = false;

        $result = $this->service->update($field);

        $this->assertInstanceOf('Content_Model_Field_Interface', $result);
        $this->assertEquals($field->id, $result->id);
      //  $this->assertEquals(2, $result->section);
        $this->assertEquals(3, $result->order);
        $this->assertEquals('textarea', $result->element);
        $this->assertEquals('test_name2', $result->name);
        $this->assertEquals('testLabel2', $result->label);
        $this->assertEquals('testValue2', $result->value);
        $this->assertEquals('testDescription2', $result->description);
        $this->assertEquals('valueA2', $result->attributes['testA']);
        $this->assertEquals('valueB2', $result->validators['testB']);
        $this->assertEquals('valueC2', $result->filters['testC']);
        $this->assertEquals(true, $result->locked);
        $this->assertEquals(Content_Model_Field::USER, $result->type);
        $this->assertEquals(true, $result->required);
        $this->assertEquals(false, $result->visible);
    }
    
    public function testUpdateFromArray() {

        //setup
        $field = $this->createValidObject();

        $array = $field->toArray();
        
        //update values
     //   $array['section'] = 2;
        $array['order'] = 3;
        $array['element'] = 'textarea';
        $array['name'] = 'test_name2';
        $array['label'] = 'testLabel2';
        $array['value'] = 'testValue2';
        $array['description'] = 'testDescription2';
        $array['attributes'] = array('testA'=>'valueA2');
        $array['validators'] = array('testB'=>'valueB2');
        $array['filters'] = array('testC'=>'valueC2');
        $array['locked'] = true;
        $array['type'] = Content_Model_Field::USER;
        $array['required'] = true;
        $array['visible'] = false;


        $result = $this->service->update($array);

        $this->assertInstanceOf('Content_Model_Field_Interface', $result);
        $this->assertEquals($field->id, $result->id);
       // $this->assertEquals(2, $result->section);
        $this->assertEquals(3, $result->order);
        $this->assertEquals('textarea', $result->element);
        $this->assertEquals('test_name2', $result->name);
        $this->assertEquals('testLabel2', $result->label);
        $this->assertEquals('testValue2', $result->value);
        $this->assertEquals('testDescription2', $result->description);
        $this->assertEquals('valueA2', $result->attributes['testA']);
        $this->assertEquals('valueB2', $result->validators['testB']);
        $this->assertEquals('valueC2', $result->filters['testC']);
        $this->assertEquals(true, $result->locked);
        $this->assertEquals(Content_Model_Field::USER, $result->type);
        $this->assertEquals(true, $result->required);
        $this->assertEquals(false, $result->visible);
    }
    

    public function testUpdateException() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->service->update($badObject);
    }

//    public function testDeleteObject() {
//
//        //setup
//        $field = $this->createValidObject();
//
//        //test delete
//        $this->service->delete($field);
//
//        //verify that it was deleted
//        $this->setExpectedException('NotFoundException');
//        $result = $this->service->getObjectById($field->id);
//    }
//
//    public function testDeleteId() {
//
//        //setup
//        $field = $this->createValidObject();
//        $id = (int)$field->id;
//       // $this->fail("id: ".$field->id);
//        $this->service->delete($id);
//        
//        $this->setExpectedException('NotFoundException');
//        $result = $this->service->getObjectById($id); 
//    }
    
    public function testDeleteArray() {

        //setup
        $field = $this->createValidObject();
      //  $this->fail("id: ".$field->id);
        
        $this->service->delete($field->toArray());
        
        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectById($field->id); 
        //die(debugArray($result));
    }
    
//     public function testDeleteBySection() {
//
//        //setup
//        $object = $this->createValidObject();
//
//        //test delete
//        $this->service->deleteBySection($object->section);
//
//        //verify that it was deleted
//        $this->setExpectedException('NotFoundException');
//        $result = $this->service->getObjectById($object->id);
//    }
//
//    public function testDeleteException() {
//        $this->setExpectedException('InvalidArgumentException');
//
//        $badObject = new StdClass();
//        $create = $this->service->delete($badObject);
//    }

    public function testDeleteAll() {
//        $this->service->deleteAll();
    }

}