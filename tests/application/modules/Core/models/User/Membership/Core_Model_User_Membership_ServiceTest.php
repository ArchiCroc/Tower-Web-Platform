<?php

/**
 * Test class for Core_Model_User_Membership_Acl_Service.
 * Generated by PHPUnit on 2011-06-22 at 08:07:56.
 */
class Core_Model_User_Membership_ServiceTest extends PHPUnit_Framework_TestCase {

   /**
     * @var Core_Model_User_Membership_Service
     */
    protected $service;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->service = new Core_Model_User_Membership_Service();
        $this->service->deleteAll();
       // $installer = new Core_Installer();
      //  $installer->installTest();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
       
    }

    public function testGetMapper() {

        $this->assertInstanceOf('Core_Model_User_Membership_MapperInterface', $this->service->getMapper());
    }

    /**
     * @todo Implement testSetMapper().
     */
    public function testSetMapper() {
        
        $mapper = new Core_Model_User_Membership_MapperDbTable();
         $this->service->setMapper($mapper);
        
        $this->assertInstanceOf('Core_Model_User_Membership_MapperInterface', $this->service->getMapper());
        $this->assertEquals($mapper, $this->service->getMapper());
        //$this->ass
    }
    
    private function _fillObject($object, $seed = 0) {
        $data = $this->_getTestData($seed);
        foreach ($data as $key => $value) {
            $object->$key = $value;
        }
        return $object;
    }
    private function _fillArray($array, $seed = 0) {
        if(is_object($array)){
            $array = $array->toArray();
        }
        return array_merge($array, $this->_getTestData($seed));
    }
    
    private function _getTestData($seed = 0) {
        
        $array = array('user' => 1 + $seed,
        'group' => 2 + $seed);
  
        return $array;
    }
    
    private function _createValidObject($seed = 0) {
        $object = new Core_Model_User_Membership();
        $object = $this->_fillObject($object, $seed);

        $result = $this->service->create($object);
        $this->assertInstanceOf('Core_Model_User_Membership_Interface', $result);
        return $result;
    }
     private function _validateResult($result, $seed = 0){
        
        $this->assertInstanceOf('Core_Model_User_Membership_Interface', $result);
        $this->assertNotNull($result->id);
        $this->assertEquals(1 + $seed, $result->user);
        $this->assertEquals(2 + $seed, $result->group);
    }

    
    public function testCreate_Invalid() {
        $userMembership = new Core_Model_User_Membership();
        $userMembership->user = 1;
        
        $this->setExpectedException('Exception');
        $result = $this->service->create($userMembership);
    }
//    
//    public function testDuplicateUrl() {
//
//        $userMembership1 = $this->createValidUserMembership();
//        $this->setExpectedException('DuplicateEntryException');
//        $userMembership2 = $this->createValidUserMembership();
//    }

    public function testCreate_validObject() {

        $result = $this->_createValidObject();
        $this->_validateResult($result);
    }
    
    public function testCreate_validArray() {

        $result = $this->service->create($this->_getTestData());

       $this->_validateResult($result);
    }

    public function testCreate_invalidObject() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->service->create($badObject);
    }
//$this->service->getObjectById($object->id);///////////////////////////////////
    public function testGetObjectById_valid() {

        $object = $this->_createValidObject();

        $result = $this->service->getObjectById($object->id);
        
        $this->_validateResult($result);
    }
    
    public function testGetObjectById_null() {

        $this->setExpectedException('InvalidArgumentException');

        $result = $this->service->getObjectById(null);
    }
    
//$this->service->getGroupIdsByUser($user);/////////////////////////////////////
     public function testGetGroupIdsByUser_valid(){
        $object = $this->_createValidObject();

        $results = $this->service->getGroupIdsByUser($object->user);
        
        $this->assertEquals(1, count($results));
     }
     
     public function testGetGroupIdsByUser_invalid(){
         $this->setExpectedException('NotFoundException');
        $results = $this->service->getGroupIdsByUser(100);
        $this->assertEquals(0, count($results));
     }
     
     public function testGetGroupIdsByUser_null(){
         $this->setExpectedException('InvalidArgumentException');
        $results = $this->service->getGroupIdsByUser(null);
        $this->assertEquals(0, count($results));
     }
//$this->service->getObjectsByUser($user);///////////////////////////////////
    public function testGetObjectsByUser_valid() {

        $object = $this->_createValidObject();
        $results = $this->service->getObjectsByUser($object->user);
        
        $this->_validateResult($results[0]);
    }
    
    public function testGetObjectsByUser_null() {

        $this->setExpectedException('InvalidArgumentException');
        $result = $this->service->getObjectsByUser(null);
    }
    
//    public function testGetObjecstByUser_notFound() {
//
//        $this->setExpectedException('NotFoundException');
//        $result = $this->service->getObjectsByUser(100);
//    }
//$this->service->getObjectByUserGroup($user, $group);///////////////////////////////////
    public function testGetObjectByUserGroup_valid() {

        $object = $this->_createValidObject();
        $result = $this->service->getObjectByUserGroup($object->user, $object->group);
        
        $this->_validateResult($result);
    }
    
    public function testGetObjectByUserGroup_nullUser() {

        $this->setExpectedException('InvalidArgumentException');
        $result = $this->service->getObjectByUserGroup(null, 2);
    }
    
     public function testGetObjectByUserGroup_nullGroup() {

        $this->setExpectedException('InvalidArgumentException');
        $result = $this->service->getObjectByUserGroup(2, null);
    }
    
    public function testGetObjectByUserGroup_notFound() {

        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectByUserGroup(5,5);
    }
    
//$this->service->add($user, $group);///////////////////////////////////////////
    public function testAdd_valid() {

        $object = (object) $this->_getTestData();
        $result = $this->service->add($object->user, $object->group);
        
        $this->_validateResult($result);
    }
    
    public function testAdd_nullUser() {

        $this->setExpectedException('InvalidArgumentException');
        $result = $this->service->add(null, 2);
    }
    
     public function testAdd_nullGroup() {

        $this->setExpectedException('InvalidArgumentException');
        $result = $this->service->add(2, null);
    }
     
//$this->service->delete($object);//////////////////////////////////////////////
    public function testDelete_validObject() {

        $object = $this->_createValidObject();
        $this->service->delete($object);

        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectById($object->id);
    }

    public function testDelete_validId() {
        
        $object = $this->_createValidObject();
        $this->service->delete((int)$object->id);
        
        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectById($object->id);  
    }
    
    public function testDelete_validArray() {

        $object = $this->_createValidObject();
        $this->service->delete($object->toArray());
        
        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectById($object->id); 
    }

    public function testDelete_invalidObject() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->service->delete($badObject);
    }
    
//$this->service->deleteByUser($user);//////////////////////////////////////////////
    public function testDeleteByUser_valid() {

        $object = $this->_createValidObject();
        $this->service->deleteByUser($object->user);

        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectById($object->id);
    }

    public function testDeleteByUser_null() {

        $this->setExpectedException('InvalidArgumentException');
        $this->service->deleteByUser(null);
    }
    
    //$this->service->deleteByUserGroup($user, $group);//////////////////////////////////////////////
    public function testDeleteByUserGroup_valid() {

        $object = $this->_createValidObject();
        $this->service->deleteByUserGroup($object->user, $object->group);

        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectById($object->id);
    }

    public function testDeleteByUserGroup_nullUser() {

        $this->setExpectedException('InvalidArgumentException');
        $this->service->deleteByUserGroup(null, 1);
    }
    
    public function testDeleteByUserGroup_nullGroup() {

        $this->setExpectedException('InvalidArgumentException');
        $this->service->deleteByUserGroup(1, null);
    }
    
    //$this->service->deleteByGroup($group);//////////////////////////////////////////////
    public function testDeleteByGroup_valid() {

        $object = $this->_createValidObject();
        $this->service->deleteByGroup($object->group);

        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectById($object->id);
    }

    public function testDeleteByGroup_null() {

        $this->setExpectedException('InvalidArgumentException');
        $this->service->deleteByGroup(null);
    }
    
//$this->service->deleteAll();//////////////////////////////////////////////////
    public function testDeleteAll() {
//        $this->service->deleteAll();
    }

}

?>
