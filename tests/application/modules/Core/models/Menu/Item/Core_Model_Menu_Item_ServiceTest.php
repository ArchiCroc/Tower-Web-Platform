<?php

//require_once dirname(__FILE__) . '/../../../../application/modules/Content/models/Menu_Item/Service.php';

/**
 * Test class for Core_Model_Menu_Item_Service.
 * Generated by PHPUnit on 2011-06-20 at 22:28:48.
 */
class Core_Model_Menu_Item_ServiceTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Core_Model_Menu_Item_Service
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Core_Model_Menu_Item_Service;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        $this->object->deleteAll();
    }

    public function testGetMapper() {

        $this->assertInstanceOf('Core_Model_Menu_Item_MapperInterface', $this->object->getMapper());
    }

    /**
     * @todo Implement testSetMapper().
     */
    public function testSetMapper() {
        
        $mapper = new Core_Model_Menu_Item_MapperDbTable();
         $this->object->setMapper($mapper);
        
        $this->assertInstanceOf('Core_Model_Menu_Item_MapperInterface', $this->object->getMapper());
        $this->assertEquals($mapper, $this->object->getMapper());
        //$this->ass
    }

    private function createValidMenu_Item() {
        $object = new Core_Model_Menu_Item();
        //id 	menu 	parent 	order 	type 	route 	title 	visible
        $object->menu = 0;
        $object->parent = 1;
        $object->order = 2;
        $object->type = Core_Model_Menu_Item::ROUTE;
        $object->route = 'testRoute';
        $object->options = array('test' => 'value');
        $object->title = 'testTitle';
        $object->visible = true;

        $result = $this->object->create($object);

        $this->assertInstanceOf('Core_Model_Menu_Item_Interface', $result);
        return $result;
    }
    
    public function testCreateInvalidMenu_Item() {
        $object = new Core_Model_Menu_Item();
        $object->menu = 0;
        $object->parent = 1;
        $object->order = 2;
        //$object->route = 'testRoute';
        $object->title = 'testTitle';
        //$object->visible = true;
        $this->setExpectedException('InvalidArgumentException');
        $result = $this->object->create($object);
    }
//    
    public function testDuplicateRoute() {

        $object1 = $this->createValidMenu_Item();
        $this->setExpectedException('DuplicateEntryException');
        $object2 = $this->createValidMenu_Item();
    }

    public function testCreateValidFromObject() {

        $result = $this->createValidMenu_Item();

        $this->assertNotNull($result->id);
        $this->assertEquals(0, $result->menu);
        $this->assertEquals(1, $result->parent);
        $this->assertEquals(2, $result->order);
        $this->assertEquals(Core_Model_Menu_Item::ROUTE, $result->type);
        $this->assertEquals('testRoute', $result->route);
        $this->assertEquals('testTitle', $result->title);
        $this->assertEquals(true, (bool) $result->visible);
    }
    
    public function testCreateFromArray() {

        $object = array(
        'menu' => 0,
        'parent' => 1,
        'order' => 2,
        'type' => Core_Model_Menu_Item::ROUTE,
        'route' => 'testRoute',
        'options' => array('test' => 'value'),
        'title' => 'testTitle',
        'visible' => true);

        $result = $this->object->create($object);

        $this->assertInstanceOf('Core_Model_Menu_Item_Interface', $result);

        $this->assertNotNull($result->id);
        $this->assertEquals(0, $result->menu);
        $this->assertEquals(1, $result->parent);
        $this->assertEquals(2, $result->order);
        $this->assertEquals(Core_Model_Menu_Item::ROUTE, $result->type);
        $this->assertEquals('testRoute', $result->route);
        $this->assertEquals('value', $result->options['test']);
        $this->assertEquals('testTitle', $result->title);
        $this->assertEquals(true, (bool) $result->visible);
    }

    public function testCreateException() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->object->create($badObject);
    }

    public function testGetObjectById() {

        //menuup
        $object = $this->createValidMenu_Item();

        //test getObject
        $result = $this->object->getObjectById($object->id);
        
        $this->assertInstanceOf('Core_Model_Menu_Item_Interface', $result);

        $this->assertEquals($object->id, $result->id);
        $this->assertEquals(0, $result->menu);
        $this->assertEquals(1, $result->parent);
        $this->assertEquals(2, $result->order);
        $this->assertEquals(Core_Model_Menu_Item::ROUTE, $result->type);
        $this->assertEquals('testRoute', $result->route);
        $this->assertEquals('value', $result->options['test']);
        $this->assertEquals('testTitle', $result->title);
        $this->assertEquals(true, (bool) $result->visible);
    }
    
    public function testGetObjectsByMenu() {

        //menuup
        $object = $this->createValidMenu_Item();

        //test getObject
        $result = $this->object->getObjectsByMenu($object->menu);
        
        $result = $result[0];
        
        $this->assertInstanceOf('Core_Model_Menu_Item_Interface', $result);

        $this->assertEquals($object->id, $result->id);
        $this->assertEquals(0, $result->menu);
        $this->assertEquals(1, $result->parent);
        $this->assertEquals(2, $result->order);
        $this->assertEquals(Core_Model_Menu_Item::ROUTE, $result->type);
        $this->assertEquals('testRoute', $result->route);
        $this->assertEquals('value', $result->options['test']);
        $this->assertEquals('testTitle', $result->title);
        $this->assertEquals(true, (bool) $result->visible);
    }
    
//     public function testGetInvalidObjectsByMenu() {
//
//        $this->setExpectedException('NotFoundException');
//        $result = $this->object->getObjectByMenu(34);
//
//    }

    public function testUpdateFromObject() {

        //menuup
        $object = $this->createValidMenu_Item();

        //update values
        $object->menu = 1;
        $object->parent = 2;
        $object->order = 3;
        $object->type = Core_Model_Menu_Item::DIVIDER;
        $object->route = 'testRoute2';
        $object->options = array('test' => 'value2');
        $object->title = 'testTitle2';
        $object->visible = false;

        $result = $this->object->update($object);

        $this->assertInstanceOf('Core_Model_Menu_Item_Interface', $result);

        $this->assertEquals($object->id, $result->id);
        $this->assertEquals(1, $result->menu);
        $this->assertEquals(2, $result->parent);
        $this->assertEquals(3, $result->order);
        $this->assertEquals(Core_Model_Menu_Item::DIVIDER, $result->type);
        $this->assertEquals('testRoute2', $result->route);
        $this->assertEquals('value2', $result->options['test']);
        $this->assertEquals('testTitle2', $result->title);
        $this->assertEquals(false, (bool) $result->visible);
    }
    
    public function testUpdateFromArray() {

        //menuup
        $object = $this->createValidMenu_Item();

        $array = $object->toArray();
        
        //update values
        $array['menu'] = 1;
        $array['parent'] = 2;
        $array['order'] = 3;
        $array['type'] = Core_Model_Menu_Item::DIVIDER;
        $array['route'] = 'testRoute2';
        $array['options'] = array('test' => 'value2');
        $array['title'] = 'testTitle2';
        $array['visible'] = false;

        $result = $this->object->update($array);

        $this->assertInstanceOf('Core_Model_Menu_Item_Interface', $result);

        $this->assertEquals($object->id, $result->id);
        $this->assertEquals(1, $result->menu);
        $this->assertEquals(2, $result->parent);
        $this->assertEquals(3, $result->order);
        $this->assertEquals(Core_Model_Menu_Item::DIVIDER, $result->type);
        $this->assertEquals('testRoute2', $result->route);
        $this->assertEquals('value2', $result->options['test']);
        $this->assertEquals('testTitle2', $result->title);
        $this->assertEquals(false, (bool) $result->visible);
    }
    

    public function testUpdateException() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->object->update($badObject);
    }

    public function testDeleteObject() {

        //menuup
        $object = $this->createValidMenu_Item();

        //test delete
        $this->object->delete($object);

        //verify that it was deleted
        $this->setExpectedException('NotFoundException');
        $result = $this->object->getObjectById($object->id);
    }

    public function testDeleteId() {

        //menuup
        $object = $this->createValidMenu_Item();
       // $this->fail("id: ".$object->id);
        $this->object->delete((int)$object->id);
        
        $this->setExpectedException('NotFoundException');
        $result = $this->object->getObjectById($object->id); 
    }
    
    public function testDeleteArray() {

        //menuup
        $object = $this->createValidMenu_Item();
       // $this->fail("id: ".$object->id);
        $this->object->delete($object->toArray());
        
        $this->setExpectedException('NotFoundException');
        $result = $this->object->getObjectById($object->id); 
    }

    public function testDeleteException() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->object->delete($badObject);
    }

    public function testDeleteAll() {
//        $this->object->deleteAll();
    }

}