<?php

/**
 * Test class for Core_Model_Route_Service.
 * Generated by PHPUnit on 2011-06-22 at 08:13:54.
 */
class Core_Model_Route_ServiceTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Core_Model_Category_Service
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Core_Model_Route_Service();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
      $this->object->deleteAll();
    }

    public function testGetMapper() {

        $this->assertInstanceOf('Core_Model_Route_MapperInterface', $this->object->getMapper());
    }

    /**
     * @todo Implement testSetMapper().
     */
    public function testSetMapper() {
        
        $mapper = new Core_Model_Route_MapperDbTable();
         $this->object->setMapper($mapper);
        
        $this->assertInstanceOf('Core_Model_Route_MapperInterface', $this->object->getMapper());
        $this->assertEquals($mapper, $this->object->getMapper());
        //$this->ass
    }

    private function createValidRoute() {
        /*id type package order active name path module controller action options */
        
        $object = new Core_Model_Route();
        $object->type = 'Route';
        $object->package = 'test';
        $object->order = 1;
        $object->active = true;
        $object->name = 'testName';
        $object->path = 'testPath';
        $object->module = 'Core';
        $object->controller = 'Index';
        $object->action = 'New';
        $object->options = 'defaults.action = New';
        $result = $this->object->create($object);

        $this->assertInstanceOf('Core_Model_Route_Interface', $result);
        return $result;
    }
    
    public function testCreateNullPackageRoute() {
        $object->type = 'Route';
        $object->package = null;
        $object->order = 1;
        $object->active = true;
        $object->name = 'testName';
        $object->path = 'testPath';
        $object->module = null;
        $object->controller = null;
        $object->action = null;
        $object->options = '';
        $result = $this->object->create($object);
        $this->assertInstanceOf('Core_Model_Route_Interface', $result);
    }
    
    public function testCreateInvalidRoute() {
       $object = new Core_Model_Route();
        $object->type = 'Route';
        $object->package = null;
        $object->order = 1;
        $object->active = true;
        //$object->name = 'testName';
        $object->path = 'testPath';
        $object->module = null;
        $object->controller = null;
        $object->action = null;
        $object->options = '';
        $this->setExpectedException('Exception');
        $result = $this->object->create($object);
    } 
    
    public function testDuplicateName() {

        $category1 = $this->createValidRoute();
        $this->setExpectedException('DuplicateEntryException');
        $category2 = $this->createValidRoute();
    }
    
    public function testCreateValidFromObject() {

        $result = $this->createValidRoute();

        $this->assertNotNull($result->id);
        $this->assertEquals('Route', $result->route);
        $this->assertEquals('test', $result->package);
        $this->assertEquals(1, $result->order);
        $this->assertEquals(true, $result->active);
        $this->assertEquals('testName', $result->name);
        $this->assertEquals('testPath', $result->path);
        $this->assertEquals('Core', $result->module);
        $this->assertEquals('Index', $result->controller);
        $this->assertEquals('New', $result->action);
        $this->assertEquals('defaults.action = New', $result->options);
    }
    
    public function testCreateFromArray() {
   
        $object = array(
        'type' => 'Route',
        'package' => 'test',
        'order' => 1,
        'active' => true,
        'name' => 'testName',
        'path' => 'testPath',
        'module' => 'Core',
        'controller' => 'Index',
        'action' => 'New',
        'options' => 'defaults.action = New');

        $result = $this->object->create($object);

        $this->assertInstanceOf('Core_Model_Route_Interface', $result);

        $this->assertNotNull($result->id);
        $this->assertEquals('Route', $result->route);
        $this->assertEquals('test', $result->package);
        $this->assertEquals(1, $result->order);
        $this->assertEquals(true, $result->active);
        $this->assertEquals('testName', $result->name);
        $this->assertEquals('testPath', $result->path);
        $this->assertEquals('Core', $result->module);
        $this->assertEquals('Index', $result->controller);
        $this->assertEquals('New', $result->action);
        $this->assertEquals('defaults.action = New', $result->options);
    }

    public function testCreateException() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->object->create($badObject);
    }

    public function testGetObjectById() {

        //setup
        $object = $this->createValidRoute();

        //test getObject
        $result = $this->object->getObjectById($object->id);
        
        $this->assertInstanceOf('Core_Model_Route_Interface', $result);

        $this->assertNotNull($result->id);
        $this->assertEquals('Route', $result->route);
        $this->assertEquals('test', $result->package);
        $this->assertEquals(1, $result->order);
        $this->assertEquals(true, $result->active);
        $this->assertEquals('testName', $result->name);
        $this->assertEquals('testPath', $result->path);
        $this->assertEquals('Core', $result->module);
        $this->assertEquals('Index', $result->controller);
        $this->assertEquals('New', $result->action);
        $this->assertEquals('defaults.action = New', $result->options);
    }

    public function testUpdateFromObject() {

        //setup
        $object = $this->createValidRoute();
        $this->assertInstanceOf('Core_Model_Route_Interface', $object);

        //update values
        $object->type = 'Route2';
        $object->package = 'test2';
        $object->order = 2;
        $object->active = flase;
        $object->name = 'testName2';
        $object->path = 'testPath2';
        $object->module = 'Core2';
        $object->controller = 'Index2';
        $object->action = 'New2';
        $object->options = 'defaults.action = New2';

        $result = $this->object->update($object);

        $this->assertInstanceOf('Core_Model_Route_Interface', $result);

        $this->assertEquals($object->id, $result->id);
        $this->assertEquals('Route', $result->route);
        $this->assertEquals('test2', $result->package);
        $this->assertEquals(2, $result->order);
        $this->assertEquals(false, $result->active);
        $this->assertEquals('testName2', $result->name);
        $this->assertEquals('testPath2', $result->path);
        $this->assertEquals('Core2', $result->module);
        $this->assertEquals('Index2', $result->controller);
        $this->assertEquals('New2', $result->action);
        $this->assertEquals('defaults.action = New2', $result->options);
    }
    
    public function testUpdateFromArray() {

        //setup
        $object = $this->createValidRoute();

        $array = $object->toArray();
        
        //update values       
         $array['type'] = 'Route2';
         $array['package'] = 'test2';
         $array['order'] = 2;
         $array['active'] = false;
         $array['name'] = 'testName2';
         $array['path'] = 'testPath2';
         $array['module'] = 'Core2';
         $array['controller'] = 'Index2';
         $array['action'] = 'New2';
         $array['options'] = 'defaults.action = New2';
        
        $result = $this->object->update($array);

        $this->assertInstanceOf('Core_Model_Route_Interface', $result);

        $this->assertEquals($object->id, $result->id);
        $this->assertEquals('test2', $result->package);
        $this->assertEquals(2, $result->order);
        $this->assertEquals(false, $result->active);
        $this->assertEquals('testName2', $result->name);
        $this->assertEquals('testPath2', $result->path);
        $this->assertEquals('Core2', $result->module);
        $this->assertEquals('Index2', $result->controller);
        $this->assertEquals('New2', $result->action);
        $this->assertEquals('defaults.action = New2', $result->options);
    }
    

    public function testUpdateException() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->object->update($badObject);
    }

    public function testDeleteObject() {

        //setup
        $object = $this->createValidRoute();

        //test delete
        $this->object->delete($object);

        //verify that it was deleted
        $this->setExpectedException('NotFoundException');
        $result = $this->object->getObjectById($object->id);
    }

    public function testDeleteId() {

        //setup
        $object = $this->createValidRoute();
       // $this->fail("id: ".$object->id);
        $this->object->delete((int)$object->id);
        
        $this->setExpectedException('NotFoundException');
        $result = $this->object->getObjectById($object->id); 
    }
    
    public function testDeleteArray() {

        //setup
        $object = $this->createValidRoute();
       // $this->fail("id: ".$object->id);
        $this->object->delete($object->toArray());
        
        $this->setExpectedException('NotFoundException');
        $result = $this->object->getObjectById($object->id); 
    }

    public function testDeleteException() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->object->delete($badObject);
    }

    public function testDeleteAll() {
//        $this->object->deleteAll();
    }

}

?>
