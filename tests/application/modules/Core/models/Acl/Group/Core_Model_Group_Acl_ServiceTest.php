<?php

//require_once dirname(__FILE__) . '/../../../../../application/models/Group/Acl/Service.php';

/**
 * Test class for Core_Model_Acl_Group_Acl_Service.
 * Generated by PHPUnit on 2011-06-22 at 08:07:56.
 */
class Core_Model_Acl_Group_ServiceTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Core_Model_Acl_Group_Service
     */
    protected $service;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->service = new Core_Model_Acl_Group_Service();
        $this->service->deleteAll();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
       
    }

    public function testGetMapper() {

        $this->assertInstanceOf('Core_Model_Acl_Group_MapperInterface', $this->service->getMapper());
    }

    public function testSetMapper() {

        $mapper = new Core_Model_Acl_Group_MapperDbTable();
        $this->service->setMapper($mapper);

        $this->assertInstanceOf('Core_Model_Acl_Group_MapperInterface', $this->service->getMapper());
        $this->assertEquals($mapper, $this->service->getMapper());
        //$this->ass
    }
    
    
    
    
    

    private function createValidGroupAcl() {
        $groupAcl = new Core_Model_Acl_Group();
        $groupAcl->group = 1;
        $groupAcl->module = 'core';
        $groupAcl->controller = 'index';
        $groupAcl->action = 'new';
        $groupAcl->collection = 3;
        $groupAcl->object = 2;
        $groupAcl->permission = 1;

        $result = $this->service->create($groupAcl);

        $this->assertInstanceOf('Core_Model_Acl_Group_Interface', $result);
        return $result;
    }

    private function createTestGroupAcls() {
        // $this->createValidGroupAcl();
        $acls = array();

        for ($i = 1; $i <= 3; $i++) {

            $base = array(
                'group' => $i,
                'module' => 'core',
                'controller' => 'test',
                'action' => 'new',
                'object' => null,
                'permission' => 1);

            $acls[] = $base;
            //core
            $acl = $base;

            $acl['action'] = 'edit';
            $acls[] = $acl;

            $acl['action'] = 'delete';
            $acls[] = $acl;

            //test
            $acl = $base;
            $acl['module'] = 'test';
            $acls[] = $acl;

            $acl['action'] = 'edit';
            $acls[] = $acl;

            $acl['action'] = 'delete';
            $acls[] = $acl;

            //specfic objects
            $acl['action'] = 'view';
            $acl['object'] = 1;
            $acls[] = $acl;

            $acl['object'] = 2;
            $acls[] = $acl;

            $acl['object'] = 3;
             $acl['collection'] = 1;
            
            $acls[] = $acl;
        }
        foreach ($acls as $acl) {
            $this->service->create($acl);
        }
    }

    public function testCreateInvalidGroupAcl() {
        $groupAcl = new Core_Model_Acl_Group();
        $groupAcl->group = 1;
        $groupAcl->module = null;
        $groupAcl->controller = 'index';
        $groupAcl->action = 'new';
        //$groupAcl->permission = 1;
        $this->setExpectedException('Exception');
        $result = $this->service->create($groupAcl);
    }

//    
//    public function testDuplicateUrl() {
//
//        $groupAcl1 = $this->createValidGroupAcl();
//        $this->setExpectedException('DuplicateEntryException');
//        $groupAcl2 = $this->createValidGroupAcl();
//    }

//$this->service->getObjectsByGroup($group)//////////////////////////////////////////
    public function testGetObjectsByGroup_valid() {

        $this->createTestGroupAcls();
        $result = $this->service->getObjectsByGroup(2);

        $this->assertEquals(6, count($result));

        foreach ($result as $acl) {
            $this->assertNotNull($acl->id);
            $this->assertEquals(2, $acl->group);
            $this->assertEquals(null, $acl->object);
            $this->assertEquals(1, $acl->permission);
        }
    }
    
    public function testGetObjectsByGroup_null() {

        $this->setExpectedException('InvalidArgumentException');
        $this->service->getObjectsByGroup(null);
    }
    
    
    //
//$this->service->getObjectsByGroups($groups);//////////////////////////////////
    public function testGetObjectsByGroups_valid() {
        $this->createTestGroupAcls();
        $result = $this->service->getObjectsByGroups(array(1, 2));

        $this->assertEquals(2, count($result));
        foreach ($result as $result2) {

            $this->assertEquals(6, count($result2));

            foreach ($result2 as $acl) {
                $this->assertNotNull($acl->id);
                $this->assertTrue(in_array($acl->group, array(1, 2)));
                $this->assertEquals(null, $acl->object);
                $this->assertEquals(1, $acl->permission);
            }
        }
    }
    
//    public function testGetObjectsByGroups_null() { //causes error
//       $this->setExpectedException('InvalidArgumentException');
//        $this->service->getObjectsByGroups(null);
//    }
    public function testGetObjectsByGroups_empty() {
        $this->setExpectedException('InvalidArgumentException');
        $this->service->getObjectsByGroups(array());
    }
    
//$this->service->getObjectsByGroupsModule($groups, $module)////////////////////
    public function testGetObjectsByGroupsModule_valid() {
        $this->createTestGroupAcls();
        $result = $this->service->getObjectsByGroupsModule(array(1, 2), 'core');

        $this->assertEquals(2, count($result));
        foreach ($result as $result2) {

            $this->assertEquals(3, count($result2));

            foreach ($result2 as $acl) {

                $this->assertNotNull($acl->id);
                $this->assertTrue(in_array($acl->group, array(1, 2)));
                $this->assertEquals('core', $acl->module);
                $this->assertEquals(null, $acl->object);
                $this->assertEquals(1, $acl->permission);
            }
        }
    }
    public function testGetObjectsByGroupsModule_emptyGroups() {
        $this->setExpectedException('InvalidArgumentException');
        $this->service->getObjectsByGroupsModule(array(), 'core');
    }
    public function testGetObjectsByGroupsModule_nullModule() {
        $this->setExpectedException('InvalidArgumentException');
        $this->service->getObjectsByGroupsModule(array(1, 2), null);
    }
    
 //$this->service->getObjectsByGroupsModuleCollection($groups, $module, $collection)   
    public function testGetObjectsByGroupsModuleCollection_valid() {
        $this->createTestGroupAcls();
        $result = $this->service->getObjectsByGroupsModuleCollection(array(1, 2), 'test', 1);

        $this->assertEquals(2, count($result));

        foreach ($result as $result2) {

            $this->assertEquals(1, count($result2));

            foreach ($result2 as $acl) {
                $this->assertNotNull($acl->id);
                $this->assertTrue(in_array($acl->group, array(1, 2)));
                $this->assertTrue(in_array($acl->module, array('test',null)));
                $this->assertTrue(in_array($acl->controller, array('test',null)));
                $this->assertTrue(in_array($acl->collection, array(1,null)),'Value Given is: '.$acl->object.' ');
                
                $this->assertEquals(1, $acl->permission);
            }
        }
    }
    
    public function testGetObjectsByGroupsModuleCollection_emptyGroups() {
        $this->setExpectedException('InvalidArgumentException');
        $this->service->getObjectsByGroupsModuleCollection(array(), 'test', 1);
    }
    public function testGetObjectsByGroupsModuleCollection_nullModule() {
        $this->setExpectedException('InvalidArgumentException');
        $this->service->getObjectsByGroupsModuleCollection(array(1, 2), null, 1);
    }
   public function testGetObjectsByGroupsModuleCollection_nullCollection() {
        $this->setExpectedException('InvalidArgumentException');
        $this->service->getObjectsByGroupsModuleCollection(array(1, 2), 'test', null);
    }
    public function testGetObjectsByGroupsModuleCollection_stringCollection() {
        $this->setExpectedException('InvalidArgumentException');
        $this->service->getObjectsByGroupsModuleCollection(array(1, 2), 'test', 'wrongtype');
    }
    
//$this->service->getObjectsByGroupsModuleControllerObject($groups, $module, $controller, $object)
    public function testGetObjectsByGroupsModuleControllerObject_valid() {
        $this->createTestGroupAcls();
        $result = $this->service->getObjectsByGroupsModuleControllerObject(array(1, 2), 'test', 'test', 1);

        $this->assertEquals(2, count($result));

        foreach ($result as $result2) {

            $this->assertEquals(1, count($result2));

            foreach ($result2 as $acl) {
                $this->assertNotNull($acl->id);
                $this->assertTrue(in_array($acl->group, array(1, 2)));
                $this->assertTrue(in_array($acl->module, array('test',null)));
            $this->assertTrue(in_array($acl->controller, array('test',null)));
            $this->assertTrue(in_array($acl->object, array(1,null)));
                $this->assertEquals(1, $acl->permission);
            }
        }
    }
     public function testGetObjectsByGroupsModuleControllerObject_emptyGroups() {
        $this->setExpectedException('InvalidArgumentException');
        $this->service->getObjectsByGroupsModuleControllerObject(array(), 'test', 'test', 1);
    } 
    public function testGetObjectsByGroupsModuleControllerObject_nullModule() {
        $this->setExpectedException('InvalidArgumentException');
        $this->service->getObjectsByGroupsModuleControllerObject(array(1,2), null, 'test', 1);
    } 
    public function testGetObjectsByGroupsModuleControllerObject_nullController() {
        $this->setExpectedException('InvalidArgumentException');
        $this->service->getObjectsByGroupsModuleControllerObject(array(1,2), 'test', null, 1);
    } 
    public function testGetObjectsByGroupsModuleControllerObject_nullObject() {
        $this->setExpectedException('InvalidArgumentException');
        $this->service->getObjectsByGroupsModuleControllerObject(array(), 'test', 'test', null);
    } 

//$this->service->getObjectsByGroupsModuleControllerObjects($groups, $module, $controller, $objects)   
    public function testGetObjectsByGroupsModuleControllerObjects_valid() {
        $this->createTestGroupAcls();
        $result = $this->service->getObjectsByGroupsModuleControllerObjects(array(1, 2), 'test', 'test', array(1, 2));

        $this->assertEquals(2, count($result));

        foreach ($result as $result2) {

            $this->assertEquals(2, count($result2));

            foreach ($result2 as $acl) {

                $this->assertNotNull($acl->id);
                $this->assertTrue(in_array($acl->group, array(1, 2)));
                $this->assertEquals('test', $acl->module);
                $this->assertTrue(in_array($acl->module, array('test',null)));
            $this->assertTrue(in_array($acl->controller, array('test',null)));
            $this->assertTrue(in_array($acl->object, array(1,2,null)));
                $this->assertEquals(1, $acl->permission);
            }
        }
    }
    public function testGetObjectsByGroupsModuleControllerObjects_emptyGroups() {
        $this->setExpectedException('InvalidArgumentException');
        $this->service->getObjectsByGroupsModuleControllerObjects(array(), 'test', 'test', array(1,2));
    } 
    public function testGetObjectsByGroupsModuleControllerObjects_nullModule() {
        $this->setExpectedException('InvalidArgumentException');
        $this->service->getObjectsByGroupsModuleControllerObjects(array(1,2), null, 'test', array(1,2));
    } 
    public function testGetObjectsByGroupsModuleControllerObjects_nullController() {
        $this->setExpectedException('InvalidArgumentException');
        $this->service->getObjectsByGroupsModuleControllerObjects(array(1,2), 'test', null, array(1,2));
    } 
    public function testGetObjectsByGroupsModuleControllerObjects_emptyObjects() {
        $this->setExpectedException('InvalidArgumentException');
        $this->service->getObjectsByGroupsModuleControllerObjects(array(1,2), 'test', 'test', array());
    } 

    public function testCreateValidFromObject() {

        $result = $this->createValidGroupAcl();

        $this->assertNotNull($result->id);
        $this->assertEquals(1, $result->group);
        $this->assertEquals('core', $result->module);
        $this->assertEquals('index', $result->controller);
        $this->assertEquals('new', $result->action);
        $this->assertEquals(2, $result->object);
        $this->assertEquals(1, $result->permission);
    }

    public function testCreateFromArray() {

        $groupAcl = array(
            'group' => 1,
            'module' => 'homenet',
            'controller' => 'test',
            'action' => 'edit',
            'object' => 2,
            'permission' => 0);

        $result = $this->service->create($groupAcl);

        $this->assertInstanceOf('Core_Model_Acl_Group_Interface', $result);

        $this->assertNotNull($result->id);
        $this->assertEquals(1, $result->group);
        $this->assertEquals('homenet', $result->module);
        $this->assertEquals('test', $result->controller);
        $this->assertEquals('edit', $result->action);
        $this->assertEquals(2, $result->object);
        $this->assertEquals(0, $result->permission);
    }

    public function testCreateException() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->service->create($badObject);
    }

    public function testGetObjectById() {

        //setup
        $groupAcl = $this->createValidGroupAcl();

        //test getObject
        $result = $this->service->getObjectById($groupAcl->id);

        $this->assertInstanceOf('Core_Model_Acl_Group_Interface', $result);

        $this->assertNotNull($result->id);
        $this->assertEquals(1, $result->group);
        $this->assertEquals('core', $result->module);
        $this->assertEquals('index', $result->controller);
        $this->assertEquals('new', $result->action);
        $this->assertEquals(2, $result->object);
        $this->assertEquals(1, $result->permission);
    }

    public function testUpdateFromObject() {

        //setup
        $groupAcl = $this->createValidGroupAcl();

        //update values
        $groupAcl->group = 2;
        $groupAcl->module = 'blog';
        $groupAcl->controller = 'admin';
        $groupAcl->action = 'view';
        $groupAcl->object = 3;
        $groupAcl->permission = 0;

        $result = $this->service->update($groupAcl);

        $this->assertInstanceOf('Core_Model_Acl_Group_Interface', $result);

        $this->assertEquals($groupAcl->id, $result->id);
        $this->assertEquals(2, $result->group);
        $this->assertEquals('blog', $result->module);
        $this->assertEquals('admin', $result->controller);
        $this->assertEquals('view', $result->action);
        $this->assertEquals(3, $result->object);
        $this->assertEquals(0, $result->permission);
    }

    public function testUpdateFromArray() {

        //setup
        $groupAcl = $this->createValidGroupAcl();

        $array = $groupAcl->toArray();

        //update values
        $array['group'] = 2;
        $array['module'] = 'blog';
        $array['controller'] = 'admin';
        $array['action'] = 'view';
        $array['object'] = 3;
        $array['permission'] = 0;


        $result = $this->service->update($array);

        $this->assertInstanceOf('Core_Model_Acl_Group_Interface', $result);

        $this->assertEquals($groupAcl->id, $result->id);
        $this->assertEquals(2, $result->group);
        $this->assertEquals('blog', $result->module);
        $this->assertEquals('admin', $result->controller);
        $this->assertEquals('view', $result->action);
        $this->assertEquals(3, $result->object);
        $this->assertEquals(0, $result->permission);
    }

    public function testUpdateException() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->service->update($badObject);
    }

    public function testDeleteObject() {

        //setup
        $groupAcl = $this->createValidGroupAcl();

        //test delete
        $this->service->delete($groupAcl);

        //verify that it was deleted
        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectById($groupAcl->id);
    }

    public function testDeleteId() {

        //setup
        $groupAcl = $this->createValidGroupAcl();
        // $this->fail("id: ".$groupAcl->id);
        $this->service->delete((int) $groupAcl->id);

        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectById($groupAcl->id);
    }

    public function testDeleteArray() {

        //setup
        $groupAcl = $this->createValidGroupAcl();
        // $this->fail("id: ".$groupAcl->id);
        $this->service->delete($groupAcl->toArray());

        $this->setExpectedException('NotFoundException');
        $result = $this->service->getObjectById($groupAcl->id);
    }

    public function testDeleteException() {
        $this->setExpectedException('InvalidArgumentException');

        $badObject = new StdClass();
        $create = $this->service->delete($badObject);
    }
    
    public function testDeleteByModule_valid() {
        $object = $this->createValidGroupAcl();
        
        $this->service->deleteByModule($object->module);
        
        $this->setExpectedException('NotFoundException');
       $this->service->getObjectById($object->id);
    }
    
    public function testDeleteByModule_null() {
        $this->setExpectedException('InvalidArgumentException');
        $this->service->deleteByModule(null);
    }
//$this->service->deleteByModuleCollection($module, $collection);///////////////
    public function testDeleteByModuleCollection_valid() {
        $object = $this->createValidGroupAcl();
        
        $this->service->deleteByModuleCollection($object->module, $object->collection);
        
        $this->setExpectedException('NotFoundException');
       $this->service->getObjectById($object->id);
    }
    public function testDeleteByModuleCollection_nullModule() {
        $this->setExpectedException('InvalidArgumentException');
        $this->service->deleteByModuleCollection(null, 1);

    }
    public function testDeleteByModuleCollection_nullCollection() {
        $this->setExpectedException('InvalidArgumentException');
        $this->service->deleteByModuleCollection('module', null);

    }
//$this->service->deleteByModuleControllerObject($module, $controller, $object);  
    public function testDeleteByModuleControllerObject_valid() {
        $object = $this->createValidGroupAcl();
        
        $this->service->deleteByModuleControllerObject($object->module, $object->controller, $object->object);
        
        $this->setExpectedException('NotFoundException');
        $this->service->getObjectById($object->id);
    }
    
    public function testDeleteByModuleControllerObject_nullModule() {
        $this->setExpectedException('InvalidArgumentException');
        $this->service->deleteByModuleControllerObject(null, 'controller', 1);
    }
    
    public function testDeleteByModuleControllerObject_nullController() {
        $this->setExpectedException('InvalidArgumentException');
        $this->service->deleteByModuleControllerObject('module', null, 1);
    }
    
    public function testDeleteByModuleControllerObject_nullObject() {
        $this->setExpectedException('InvalidArgumentException');
        $this->service->deleteByModuleControllerObject('module', 'controller', null);
    }

//$this->service->deleteAll();//////////////////////////////////////////////////
    public function testDeleteAll() {
        $object = $this->createTestGroupAcls();
//        $this->service->deleteAll();
    }

}